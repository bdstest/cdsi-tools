name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Code formatting check
      run: |
        black --check src/ tests/
        isort --check-only src/ tests/
    
    - name: Linting
      run: |
        flake8 src/ tests/
        pylint src/ --disable=all --enable=W,E
    
    - name: Type checking
      run: mypy src/ --ignore-missing-imports
    
    - name: Security scanning
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/
        safety check
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
    
    - name: Performance tests
      run: |
        pytest tests/performance/ -v --benchmark-only
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          .coverage

  regulatory-monitor:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run regulatory monitoring
      run: |
        python src/monitors/rss_monitor.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create issues for new alerts
      run: |
        python scripts/create_compliance_issues.py
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update monitoring status
      run: |
        python scripts/update_monitoring_status.py
    
    - name: Commit monitoring results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add data/
        git commit -m "Update regulatory monitoring results" || exit 0
        git push

  newsletter-generation:
    runs-on: ubuntu-latest
    needs: regulatory-monitor
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate weekly newsletter
      run: |
        python src/newsletter/newsletter_service.py --generate-only
    
    - name: Send newsletter (if configured)
      run: |
        python src/newsletter/newsletter_service.py --send
      env:
        EMAIL_SERVICE_KEY: ${{ secrets.EMAIL_SERVICE_KEY }}
        NEWSLETTER_ENABLED: ${{ secrets.NEWSLETTER_ENABLED }}
    
    - name: Upload newsletter artifacts
      uses: actions/upload-artifact@v3
      with:
        name: weekly-newsletter
        path: data/newsletters/